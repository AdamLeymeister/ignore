
import psycopg2

def get_table_schema(cursor, table_name):
    """Retrieve column names and foreign key constraints for the table."""
    cursor.execute(f"""
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_name = %s;
    """, (table_name,))
   
    columns = cursor.fetchall()
   
    cursor.execute(f"""
        SELECT
            kcu.column_name,
            ccu.table_name AS foreign_table,
            ccu.column_name AS foreign_column
        FROM
            information_schema.key_column_usage kcu
        JOIN
            information_schema.constraint_column_usage ccu
        ON
            kcu.constraint_name = ccu.constraint_name
        WHERE kcu.table_name = %s;
    """, (table_name,))
   
    foreign_keys = cursor.fetchall()
   
    return columns, foreign_keys

def generate_insert_statements(table_name, columns, foreign_keys):
    """Generate the SQL INSERT statements for the table and its foreign keys."""
    insert_statements = []

    # Prepare the INSERT for the main table
    column_names = [col[0] for col in columns]
    values = [f"'VALUE_{col[0]}'" for col in columns]  # Replace with actual values

    insert_main = f"INSERT INTO {table_name} ({', '.join(column_names)}) VALUES ({', '.join(values)});"
    insert_statements.append(insert_main)

    # Prepare INSERTs for foreign tables
    for fk_col, fk_table, fk_column in foreign_keys:
        fk_insert = f"INSERT INTO {fk_table} ({fk_column}) VALUES ('VALUE_{fk_column}');"
        insert_statements.append(fk_insert)

    return insert_statements

def main():
    conn = psycopg2.connect(
        dbname="your_db",
        user="your_user",
        password="your_password",
        host="your_host",
        port="your_port"
    )
    cursor = conn.cursor()

    table_name = input("Enter table name: ")
    columns, foreign_keys = get_table_schema(cursor, table_name)
   
    insert_statements = generate_insert_statements(table_name, columns, foreign_keys)
   
    print("\nGenerated INSERT Statements:")
    for stmt in insert_statements:
        print(stmt)

    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()
