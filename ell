IF OBJECT_ID('usp_InsertWithForeignKeys') IS NOT NULL
    DROP PROCEDURE usp_InsertWithForeignKeys;
GO

CREATE PROCEDURE usp_InsertWithForeignKeys 
    @table_name NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    -- Create a temporary table for foreign key dependencies
    IF OBJECT_ID('tempdb..#ForeignKeys') IS NOT NULL DROP TABLE #ForeignKeys;
    CREATE TABLE #ForeignKeys (
        parent_table NVARCHAR(128),
        fk_col NVARCHAR(128),
        fk_table NVARCHAR(128),
        fk_column NVARCHAR(128)
    );

    -- Populate foreign key relationships dynamically
    INSERT INTO #ForeignKeys (parent_table, fk_col, fk_table, fk_column)
    SELECT 
        KCU1.TABLE_NAME AS parent_table,
        KCU1.COLUMN_NAME AS fk_col,
        KCU2.TABLE_NAME AS fk_table,
        KCU2.COLUMN_NAME AS fk_column
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 
        ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 
        ON KCU2.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME;

    -- Recursive CTE to determine insertion order
    WITH RecursiveFKs AS (
        SELECT 
            fk_table, fk_column, 1 AS level
        FROM #ForeignKeys
        WHERE parent_table = @table_name

        UNION ALL

        SELECT 
            f.fk_table, f.fk_column, r.level + 1
        FROM #ForeignKeys f
        INNER JOIN RecursiveFKs r 
            ON f.parent_table = r.fk_table
    )
    SELECT * INTO #InsertionOrder FROM RecursiveFKs ORDER BY level DESC;

    -- Declare variables for dynamic SQL execution
    DECLARE @fk_table NVARCHAR(128), @fk_column NVARCHAR(128), @fk_insert NVARCHAR(MAX);
    
    -- Loop through foreign keys in order and insert dummy values
    DECLARE fk_cursor CURSOR FOR
    SELECT fk_table, fk_column FROM #InsertionOrder;

    OPEN fk_cursor;
    FETCH NEXT FROM fk_cursor INTO @fk_table, @fk_column;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Generate and execute the foreign table insert statement
        SET @fk_insert = 'IF NOT EXISTS (SELECT 1 FROM ' + @fk_table + ' WHERE ' + @fk_column + ' = ''VALUE_' + @fk_column + ''')
                          INSERT INTO ' + @fk_table + ' (' + @fk_column + ') 
                          VALUES (''VALUE_' + @fk_column + ''');';

        EXEC sp_executesql @fk_insert;
        
        FETCH NEXT FROM fk_cursor INTO @fk_table, @fk_column;
    END;

    CLOSE fk_cursor;
    DEALLOCATE fk_cursor;

    -- Generate the main table INSERT statement dynamically
    DECLARE @sql NVARCHAR(MAX);
    SET @sql = (SELECT 
        'INSERT INTO ' + @table_name + ' (' + STRING_AGG(COLUMN_NAME, ', ') + ') VALUES (...);'
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_NAME = @table_name
    );

    -- Execute the main insert
    EXEC sp_executesql @sql;

    -- Cleanup temp tables
    DROP TABLE #ForeignKeys;
    DROP TABLE #InsertionOrder;
END;
GO